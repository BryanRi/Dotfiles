#+TITLE: Emacs Configuration
#+AUTHOR: Bryan Rinders
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Tips for Use
In this document I've added links in many places that lead you to
documentation for the various packages we use.  If you're looking at
this file in Emacs, you can put your cursor on a link and press =C-c
C-o= or run =M-x org-open-at-point= to open the link in your web
browser.

* Startup Performance
#+begin_src emacs-lisp

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun br/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                       (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'br/display-startup-time)

#+end_src

* Package System Setup
Emacs has a built in package manager but it doesn't make it easy to
automatically install packages on a new system the first time you pull
down your configuration.  [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used
in this configuration to make it a lot easier to automate the
installation and configuration of everything else we use.

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-and-compile
    (setq use-package-always-ensure t
          use-package-expand-minimally t))

#+end_src

** Automatic Package Updates

The auto-package-update package helps us keep our Emacs packages up to date!  It will prompt you after a certain number of days either at startup or at a specific time of day to remind you to update your packages.

You can also use =M-x auto-package-update-now= to update right now!

#+begin_src emacs-lisp

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 30)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))

#+end_src

* Keep Folders Clean
We use the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package to keep folders where we edit files
and the Emacs configuration folder clean!  It knows about a wide
variety of variables for built in Emacs features as well as those from
community packages so it can be much easier than finding and setting
these variables yourself.

#+begin_src emacs-lisp

  ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!
;  (setq user-emacs-directory "~/.cache/emacs")

  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src

* Basic UI Configuration
This section configures basic UI settings that remove unneeded
elements to make Emacs look a lot more minimal and modern.

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (menu-bar-mode -1)          ; Disable the menu bar

  (column-number-mode)
  (global-display-line-numbers-mode t)
  (setq display-line-numbers 'relative)

#+end_src

* !! Keybinding Configuration
This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing
experience. [[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that
integrates well with which-key.  [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to
automatically configure various Emacs modes with Vi-like keybindings
for evil-mode.

#+begin_src emacs-lisp

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :after evil
    :config
    (general-create-definer br/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (br/leader-keys
      "t"   '(:ignore t :which-key "toggles")
      "tt"  '(counsel-load-theme :which-key "choose theme")
      "fde" '(lambda () (interactive) (find-file (expand-file-name "~/.emacs.d/init.org")))
      "a"   'evil-add
      "x"   'evil-sub))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll nil)
    (setq evil-want-C-i-jump nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    :config
    (evil-mode 1)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

* !! UI Configuration
** Color Theme
[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes.  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.  You can also run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp

(use-package doom-themes
  :init (load-theme 'doom-gruvbox t))

#+end_src

** Which Key
[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing
any key binding in Emacs to offer you all possible completions for the
prefix. This is very useful for learning the possible key bindings in
the mode of your current buffer.

#+begin_src emacs-lisp

  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))

#+end_src

** Ivy and Counsel
[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs. It provides a
minimal yet powerful selection menu that appears when you open files,
switch buffers, and for many other tasks in Emacs. Counsel is a
customized set of commands to replace `find-file` with
`counsel-find-file, etc which provide useful commands for each of the
default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to
provide more information about each item.

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("RET" . ivy-alt-done)
           ("<right>" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "%d%d ")
    (ivy-mode 1))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    ; cant change defvar variables
    (counsel-dired-listing-switches "-Alh --group-directories-first")
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))

#+end_src

*** Improved Candidate Sorting with prescient.el

prescient.el provides some helpful behavior for sorting Ivy completion candidates based on how recently or frequently you select them.  This can be especially helpful when using =M-x= to run commands that you don't have bound to a key but still need to access occasionally.

This Prescient configuration is optimized for use in System Crafters videos and streams, check out the [[https://youtu.be/T9kygXveEz0][video on prescient.el]] for more details on how to configure it!

#+begin_src emacs-lisp

  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; Uncomment the following line to have sorting remembered across sessions!
    (prescient-persist-mode 1)
    (ivy-prescient-mode 1))

#+end_src

** Helpful Help Commands
[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs'
=describe-= command buffers.  For example, if you use
=describe-function=, you will not only get the documentation about the
function, you will also see the source code of the function and where
it gets used in other places in the Emacs configuration.  It is very
useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp

  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Text Scaling
This is an example of using [[https://github.com/abo-abo/hydra][Hydra]] to design a transient key binding
for quickly adjusting the scale of the text on screen.  We define a
hydra that is bound to =C-s t s= and, once activated, =j= and =k=
increase and decrease the text scale.  You can press any other key (or
=f= specifically) to exit the transient key map.

#+begin_src emacs-lisp

  (use-package hydra
    :defer t)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (br/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

* !! Org Mode
[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs.  It is a rich
document editor, project planner, task and time tracker, blogging
engine, and literate coding utility all wrapped up in one package.

** Better Font Faces
The =br/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we're editing a document in =org-mode=.  We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.

#+begin_src emacs-lisp

  (defun br/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :height 120))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block                nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table                nil                 :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula              nil                 :inherit 'fixed-pitch)
    (set-face-attribute 'org-code                 nil                 :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table                nil                 :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim             nil                 :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword      nil                 :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line            nil                 :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox             nil                 :inherit 'fixed-pitch)
    (set-face-attribute 'line-number              nil                 :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil                 :inherit 'fixed-pitch)
    ;; configure the org headers
    (set-face-attribute 'org-level-1              nil :foreground "#D79921"))
    ;; (set-face-attribute 'org-level-2              nil :foreground "#98971A")
    ;; (set-face-attribute 'org-level-3              nil :foreground "#FF8019")
    ;; (set-face-attribute 'org-level-4              nil :foreground "#D5C4A1")
    ;; (set-face-attribute 'org-level-5              nil :foreground "#83A598")
    ;; (set-face-attribute 'org-level-6              nil :foreground "#CC241D")
    ;; (set-face-attribute 'org-level-7              nil :foreground "#b8BB26")
    ;; (set-face-attribute 'org-level-8              nil :foreground "#83A598")
  (custom-set-faces
    ;; Change the theme for org agenda
    '(org-agenda-structure     ((t (                  :foreground "#98971A" :weight ultra-bold :height 1.5))))
    '(org-agenda-date-today    ((t (                  :foreground "#CC241D" :weight ultra-bold :height 1.2))))
    '(org-agenda-date          ((t (                  :foreground "#689D6A" :weight ultra-bold :height 1.1))))
    '(org-agenda-date-weekend  ((t (                  :foreground "#8EC07E" :weight ultra-bold :height 1.1))))
    '(org-agenda-done          ((t (:inherit org-done :foreground "#7C6F64"                               ))))
    '(org-scheduled-today      ((t (                  :foreground "#D5C4A1"                               ))))
    '(org-scheduled-previously ((t (                  :foreground "#D5C4A1"                               ))))
    '(org-warning              ((t (                  :foreground "#EA7019"                               )))))

#+end_src

** Basic Config
This section contains the basic configuration for =org-mode= plus the configuration for Org agendas and capture templates.  There's a lot to unpack in here so I'd recommend watching the videos for [[https://youtu.be/VcgjTEa0kU4][Part 5]] and [[https://youtu.be/PNE-mgkZ6HM][Part 6]] for a full explanation.

#+begin_src emacs-lisp
;
  (defun br/org-mode-setup ()
    (org-indent-mode)
;    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :commands (org-capture org-agenda)
    :hook (org-mode . br/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (setq org-babel-no-eval-on-ctrl-c-ctrl-c t)
    
    (setq org-confirm-babel-evaluate nil)

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'note)
;    (setq org-log-into-drawer t)

    (setq org-agenda-files
          '("~/top/schedule/tasks.org"
            "~/top/schedule/habits.org"
            "~/top/schedule/birthdays.org"))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 53)

    (setq org-todo-keywords
      '((sequence "TODO(t)" "CONT(c)" "|" "DONE(d!)")
        (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(t)" "CANC(k@)")))

    (setq org-refile-targets
      '(("archive.org" :maxlevel . 1)
        ("tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
      '((:startgroup)
         ; Put mutually exclusive tags here
         (:endgroup)
         ("@appointment" . ?A)
         ("@home" . ?H)
         ("@errand" . ?E)
         ("@work" . ?W)
         ("agenda" . ?a)
         ("batch" . ?b)
         ("homework" . ?h)
         ("exam" . ?e)
         ("idea" . ?i)
         ("note" . ?n)
         ("planning" . ?l)
         ("project" . ?p)
         ("publish" . ?P)))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
     '(("o" "2 Week Overview"
        ((agenda "" ((org-agenda-overriding-header (format-time-string "2 Week Overview (W%W-)%n" org-starting-day))
                     (org-agenda-span 14)
                     (org-deadline-warning-days 0)))
         (todo "NEXT"
               ((org-agenda-overriding-header "Next Tasks")))
         (tags-todo "project/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       ("A" "Daily agenda and top priority tasks"
         ((tags-todo "*"
                     ((org-agenda-skip-function '(org-agenda-skip-if nil '(timestamp)))
                      (org-agenda-skip-function
                       `(org-agenda-skip-entry-if
                         'notregexp ,(format "\\[#%s\\]" (char-to-string org-lowest-priority))))
                      (org-agenda-block-separator nil)
                      (org-agenda-overriding-header "Batch Tasks")))
          (tags-todo "*"
                     ((org-agenda-skip-function '(org-agenda-skip-if nil '(timestamp)))
                      (org-agenda-skip-function
                       `(org-agenda-skip-entry-if
                         'notregexp ,(format "\\[#%s\\]" (char-to-string org-highest-priority))))
                      (org-agenda-block-separator nil)
                      (org-agenda-overriding-header "\nImportant Tasks Without a Date")))
          (agenda "" ((org-agenda-span 1)
                      (org-deadline-warning-days 0)
                      (org-agenda-block-separator nil)
                      (org-scheduled-past-days 0)
                      ;; We don't need the `org-agenda-date-today'
                      ;; highlight because that only has a practical
                      ;; utility in multi-day views.
                      (org-agenda-day-face-function (lambda (date) 'org-agenda-date))
                      ;; (org-agenda-format-date "%A %-e %B %Y")
                      (org-agenda-overriding-header "\nToday's Agenda")))
          (agenda "" ((org-agenda-start-on-weekday nil)
                      (org-agenda-start-day "+1d")
                      (org-agenda-span 5)
                      (org-deadline-warning-days 0)
                      (org-agenda-block-separator nil)
                      (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                      (org-agenda-overriding-header "\nNext Five Days")))
          (agenda "" ((org-agenda-time-grid nil)
                      (org-agenda-start-on-weekday nil)
                      ;; We don't want to replicate the previous section's
                      ;; three days, so we start counting from the day after.
                      (org-agenda-start-day "+6d")
                      (org-agenda-span 14)
                      (org-agenda-show-all-dates nil)
                      (org-deadline-warning-days 0)
                      (org-agenda-block-separator nil)
                      (org-agenda-entry-types '(:deadline))
                      (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                      (org-agenda-overriding-header "\nUpcoming Deadlines (+14d)")))))

       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       ("n" "Next Tasks"
        ((todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))))

       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       ("W" "Work Tasks" tags-todo "+work-email")

       ;; Low-effort next actions
       ("e" "Low Effort Tasks" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
        ((org-agenda-overriding-header "Low Effort Tasks")
         (org-agenda-max-todos 20)
         (org-agenda-files org-agenda-files)))

       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       ("w" "Workflow Status"
        ((todo "WAIT"
               ((org-agenda-overriding-header "Waiting on External")
                (org-agenda-files org-agenda-files)))
         (todo "REVIEW"
               ((org-agenda-overriding-header "In Review")
                (org-agenda-files org-agenda-files)))
         (todo "PLAN"
               ((org-agenda-overriding-header "In Planning")
                (org-agenda-todo-list-sublevels nil)
                (org-agenda-files org-agenda-files)))
         (todo "BACKLOG"
               ((org-agenda-overriding-header "Project Backlog")
                (org-agenda-todo-list-sublevels nil)
                (org-agenda-files org-agenda-files)))
         (todo "READY"
               ((org-agenda-overriding-header "Ready for Work")
                (org-agenda-files org-agenda-files)))
         (todo "ACTIVE"
               ((org-agenda-overriding-header "Active Projects")
                (org-agenda-files org-agenda-files)))
         (todo "COMPLETED"
               ((org-agenda-overriding-header "Completed Projects")
                (org-agenda-files org-agenda-files)))
         (todo "CANC"
               ((org-agenda-overriding-header "Cancelled Projects")
                (org-agenda-files org-agenda-files)))))))

    (setq org-capture-templates
      `(("t" "Tasks / Projects")
        ("tt" "Task" entry (file+olp "~/Desktop/schedule/tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

        ("j" "Journal Entries")
        ("jj" "Journal" entry
             (file+olp+datetree "~/Desktop/schedule/journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
        ("jm" "Meeting" entry
             (file+olp+datetree "~/Desktop/schedule/journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

        ("w" "Workflows")
        ("we" "Checking Email" entry (file+olp+datetree "~/Desktop/schedule/journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

        ("m" "Metrics Capture")
        ("mw" "Weight" table-line (file+headline "~/Desktop/schedule/metrics.org" "Weight")
         "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

    ;; define a global key map to go directly to a capture template
    (define-key global-map (kbd "C-c j")
      (lambda () (interactive) (org-capture nil "jj")))

    (br/org-font-setup))

#+end_src

*** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] which we may cover in a later video.

#+begin_src emacs-lisp

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** Center Org Buffers

We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.  This is really a matter of personal preference so you can remove the block below if you don't like the behavior.

#+begin_src emacs-lisp

;  (defun br/org-mode-visual-fill ()
;    (setq visual-fill-column-width 100
;          visual-fill-column-center-text t)
;    (visual-fill-column-mode 1))
;
;  (use-package visual-fill-column
;    :hook (org-mode . br/org-mode-visual-fill))

#+end_src

** Configure Babel Languages
To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages/index.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
	      (haskell . t)
	      (shell . t)
	      (ein . t)
          (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

** Structure Templates
Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)
    '(org-structure-template-alist
      (quote
        (("sh" . "src shell")
         ("el" . "src emacs-lisp")
         ("py" . "src python")
         ("hs" . "src haskell")
         ("a"  . "export_ascii")
         ("ipy". "src ipython :session :async :results output")))))

;    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
;    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
;    (add-to-list 'org-structure-template-alist '("py" . "src python"))
;    (add-to-list 'org-structure-template-alist '("hs" . "src haskell")))

#+end_src

** Auto-tangle Configuration Files
This snippet adds a hook to =org-mode= buffers so that =br/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun br/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'br/org-babel-tangle-config)))

#+end_src

* !! Development
** Languages
*** Haskell 
#+begin_src emacs-lisp

  (getenv "PATH")

  (use-package haskell-mode)
  (add-hook 'haskell-mode-hook #'lsp)
  (add-to-list 'load-path "/home/br/.ghcup/bin")
  (setenv "PATH" (concat (getenv "PATH") ":/home/br/.ghcup/bin"))
  (setq exec-path (append exec-path '("/home/br/.ghcup/bin")))

#+end_src

*** Python
#+begin_src emacs-lisp

  (use-package python-mode)

#+end_src

Jupyter notebook like experience in org mode with [[https://github.com/millejoh/emacs-ipython-notebook][ein]]. Makes sure to install the ipykernel or some other jupyter kernel [[https://github.com/jupyter/jupyter/wiki/Jupyter-kernels][here]].

#+BEGIN_SRC emacs-lisp

  (use-package ein
    :ensure t)

#+END_SRC

** !! Magit
[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp

  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge
    :after magit)

#+end_src

** Commenting
Emacs' built in commenting functionality =comment-dwim= (usually bound
to =M-;=) doesn't always comment things in the way you might expect so
we use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior.  I've
bound it to =M-/= since other editors sometimes use this binding but
you could also replace Emacs' =M-;= binding with this command.

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-;" . evilnc-comment-or-uncomment-lines))

#+end_src

** Rainbow Delimiters
[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes
nested parentheses and brackets according to their nesting depth.
This makes it a lot easier to visually match parentheses in Emacs Lisp
code without having to count them yourself.

#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

* Small Utils
** evil-surround
Useful utility to surround text with any kind of characters, i.e. ',
", [], even html tags or whatever you want. It is based on
surround.vim. See [[https://github.com/emacs-evil/evil-surround][evil-surround]] for documentation.

*Useful key bindings:*
- =S '= - in VISUAL mode, to surround the selected text with '
- =c s " '= - in NORMAL mode, to change the text surrounded by " to '
- The ="= and ='= can be replace by any text object.

#+BEGIN_SRC emacs-lisp

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))

#+END_SRC

** evil-matchit
Vim matchit.vim by Benji Fisher is ported into Emacs, [[https://github.com/redguardtoo/evil-matchit][evil-matchit]].
Press =%= to jump between matched tags in Emacs. For example, in HTML
“<div>” and “</div>” are a pair of tags.

#+BEGIN_SRC emacs-lisp

  (use-package evil-matchit
    :ensure t
    :config
    (global-evil-matchit-mode 1))

#+END_SRC

* Personal Files
Load some of the files that I have written myself.

#+begin_src emacs-lisp

(defun load-directory (dir)
      (let ((load-it (lambda (f)
		       (load-file (concat (file-name-as-directory dir) f)))
		     ))
	(mapc load-it (directory-files dir nil "\\.el$"))))

(load-directory (concat user-emacs-directory "personal"))

#+end_src

* !! File Management
** Dired
Dired is a built-in file manager for Emacs that does some pretty amazing things!  Here are some key bindings you should try out: 

*** Key Bindings
**** Navigation
*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

**** Marking files
- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!

**** Copying and Renaming files
- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

**** Deleting files
- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

**** Creating and extracting archives
- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

**** Other common operations
- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

*** Configuration
#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-Alhu --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer
      "ff"  '(lambda () (interactive) (dired-single-magic-buffer "~/.config/fish"))
      "fv"  '(lambda () (interactive) (dired-single-magic-buffer "~/.config/vim"))
      "fd"  '(lambda () (interactive) (dired-single-magic-buffer "~/Desktop"))
      "fD"  '(lambda () (interactive) (dired-single-magic-buffer "~/Downloads"))
      "fb"  '(lambda () (interactive) (dired-single-magic-buffer "~/.local/bin"))
      "fss" '(lambda () (interactive) (dired-single-magic-buffer "~/.local/suckless/st"))
      "fsd" '(lambda () (interactive) (dired-single-magic-buffer "~/.local/suckless/dwm"))
      "fr"  '(lambda () (interactive) (dired-single-magic-buffer "/media/br/ru"))))

  (use-package dired-single
    :commands (dired dired-jump))

  (use-package dired-open
    :commands (dired dired-jump)
    :config
    ;; Doesn't work as expected!
    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))

#+end_src

* Runtime Performance
Dial the GC threshold back down so that garbage collection happens
more frequently but in less time.

#+begin_src emacs-lisp

  ;; Make gc pauses faster by decreasing the threshold.
  (setq gc-cons-threshold (* 2 1000 1000))

#+end_src
